library(ggmcmc)
library(dplyr)
library(scatterplot3d)
set.seed(743435)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = -0.9
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
View(C)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
summary(PCA)
PCA_3D = scatterplot3d(x = PCA_R[, 1], y = PCA_R[, 2], z = PCA_R[, 3],        #  visual 03
xlab = "PC1 (.7910)", ylab = "PC2 (.2032)", zlab = "PC3 (.0057)",
color = hex_50, pch = 19, type = "h")
PCA_2D = PCA_3D$xyz.convert(PCA_R[,1], PCA_R[,2], PCA_R[,3])
text(PCA_2D$x, PCA_2D$y,
labels = id_50, pos = 3)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
set.seed(743435)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
View(C)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
summary(PCA)
PCA_3D = scatterplot3d(x = PCA_R[, 1], y = PCA_R[, 2], z = PCA_R[, 3],        #  visual 03
xlab = "PC1 (.8060)", ylab = "PC2 (.1880)", zlab = "PC3 (.0059)",
color = hex_50, pch = 19, type = "h")
PCA_2D = PCA_3D$xyz.convert(PCA_R[,1], PCA_R[,2], PCA_R[,3])
text(PCA_2D$x, PCA_2D$y,
labels = id_50, pos = 3)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
summarise(PCA)
summary(PCA)
PCA_3D = scatterplot3d(x = PCA_R[, 1], y = PCA_R[, 2], z = PCA_R[, 3],        #  visual 03
xlab = "PC1 (.8033)", ylab = "PC2 (.1906)", zlab = "PC3 (.0001)",
color = hex_50, pch = 19, type = "h")
PCA_2D = PCA_3D$xyz.convert(PCA_R[,1], PCA_R[,2], PCA_R[,3])
text(PCA_2D$x, PCA_2D$y,
labels = id_50, pos = 3)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
summary(PCA)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
View(W)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Desktop/simulation/simulation.R", echo=TRUE)
rejectionRate(mcmc)
rejectionRate(mcmc)
rejectionRate(MCMC)
View(MCMC)
View(MCMC)
MCMC$summary
MCMC$Acceptance_Rate
MCMC$impacts
library(ggmcmc)
ggmcmc(mcmc)
ggmcmc(as.data.frame(mcmc))
ggmcmc(ggs(mcmc))
source("~/Desktop/simulation/simulation.R", echo=TRUE)
MCMC
str(mcmc)
class(ggs(mcmc))
typeof(ggs(mcmc))
mcmc.df <- ggs(mcmc)
str(mcmc.df)
ggmcmc(mcmc.df)
MCMC$summary
source("~/Desktop/simulation/simulation.R", echo=TRUE)
source("~/Desktop/simulation/simulation.R", echo=TRUE)
source("~/Desktop/simulation/simulation.R", echo=TRUE)
sample(1:100, 1)
sample(1:100, 2)
n <- 50
sample(2:n-1)
sample(2:n-1,1)
sample(2:n-1,1)
sample(2:n-1,1)
sample(2:n-1,1)
sample(2:n-1,1)
sample(2:n-1,1)
sample(2:n-1,1)
2:n-1
2:(n-1)
source("~/Desktop/simulation/simulation.R", echo=TRUE)
biplot(PCA, cex=c(0.01, 1), xlab = "PC1 (65%)", ylab = "PC2 (15%)")
biplot(PCA, cex=c(0.01, 1), xlab = "PC1 (65%)", ylab = "PC2 (15%)")
library(sna)
library(BSPADATA)
library(dplyr)
library(ggmcmc)
set.seed(743435)
binmat.f <- function(n) {
B <- matrix(0, n, n)
B[1, 2] <- 1
B[n, n-1] <- 1
for (i in 2:(n-1)) {
B[i, i+1] <- 1
B[i, i-1] <- 1
}
return(B)
}
rmvnorm.f <- function(n, mu, Sigma) {
p <- length(mu)
Q <- chol(Sigma)
Z <- matrix(rnorm(n * p), n, p)
X <- Z %*% Q + rep(1, n) %*% t(mu)
X <- data.frame(X)
return(X)
}
dmvnorm.f <- function(x, mu, Sigma, log = TRUE) {
p <- length(x)
if (log == !TRUE) {
f <- exp(-0.5 * t(x - mu) %*% solve(Sigma) %*% (x - mu))
f <- f / ((2 * pi)^(0.5 * p) * det(Sigma)^0.5)
} else {
f <- -0.5 * (log(det(Sigma)) + p * log(2 * pi))
f <- f - 0.5 * (t(x - mu) %*% solve(Sigma) %*% (x - mu))
}
return(f)
}
mu.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
mu <- A %*% X %*% beta
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
X_k <- rho * D_k %*% W %*% s_k %*% t(s_k) %*% X
X_k <- X_k + D_k %*% X
mu <- A_k %*% X_k %*% beta
}
return(mu)
}
Sigma.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
V <- sigma2 * diag(n)
Sigma <- A %*% V %*% t(A)
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
V_k <- rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% s_k %*% t(s_k) %*% t(W) %*% t(D_k)
V_k <- V_k + D_k %*% t(D_k)
V_k <- sigma2 * V_k
Sigma <- A_k %*% V_k %*% t(A_k)
}
return(Sigma)
}
delmat.f <- function(k) {
D <- diag(n-1)
D <- as.data.frame(D)
D <- mutate(D, 0, .before = k)
D <- as.matrix(D)
return(D)
}
selvec.f <- function(k) {
s <- numeric(n)
s[k] <- 1
return(s)
}
n <- 50
b <- 25
N <- n + b
B <- binmat.f(n = N)
W <- make.stochastic(dat = B, mode = "row")
x0 <- rep(1, N)
x1 <- runif(N, 0, 400)
x2 <- runif(N, 10, 23)
X <- cbind(x0, x1, x2)
beta <- c(18, 0.478, -1.3)
sigma2 <- rep(45, N)
rho <- 0.7
# A <- invIrW.f()
mu <- mu.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
Sigma <- Sigma.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
y <- t(rmvnorm.f(n = 1, mu = mu, Sigma = Sigma))
library(sna)
library(BSPADATA)
library(dplyr)
library(ggmcmc)
set.seed(743435)
binmat.f <- function(n) {
B <- matrix(0, n, n)
B[1, 2] <- 1
B[n, n-1] <- 1
for (i in 2:(n-1)) {
B[i, i+1] <- 1
B[i, i-1] <- 1
}
return(B)
}
rmvnorm.f <- function(n, mu, Sigma) {
p <- length(mu)
Q <- chol(Sigma)
Z <- matrix(rnorm(n * p), n, p)
X <- Z %*% Q + rep(1, n) %*% t(mu)
X <- data.frame(X)
return(X)
}
dmvnorm.f <- function(x, mu, Sigma, log = TRUE) {
p <- length(x)
if (log == !TRUE) {
f <- exp(-0.5 * t(x - mu) %*% solve(Sigma) %*% (x - mu))
f <- f / ((2 * pi)^(0.5 * p) * det(Sigma)^0.5)
} else {
f <- -0.5 * (log(det(Sigma)) + p * log(2 * pi))
f <- f - 0.5 * (t(x - mu) %*% solve(Sigma) %*% (x - mu))
}
return(f)
}
mu.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
mu <- A %*% X %*% beta
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
X_k <- rho * D_k %*% W %*% s_k %*% t(s_k) %*% X
X_k <- X_k + D_k %*% X
mu <- A_k %*% X_k %*% beta
}
return(mu)
}
Sigma.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
V <- sigma2 * diag(n)
Sigma <- A %*% V %*% t(A)
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
V_k <- rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% s_k %*% t(s_k) %*% t(W) %*% t(D_k)
V_k <- V_k + D_k %*% t(D_k)
V_k <- sigma2 * V_k
Sigma <- A_k %*% V_k %*% t(A_k)
}
return(Sigma)
}
delmat.f <- function(k) {
D <- diag(n-1)
D <- as.data.frame(D)
D <- mutate(D, 0, .before = k)
D <- as.matrix(D)
return(D)
}
selvec.f <- function(k) {
s <- numeric(n)
s[k] <- 1
return(s)
}
n <- 50
B <- binmat.f(n = n)
W <- make.stochastic(dat = B, mode = "row")
x0 <- rep(1, n)
x1 <- runif(n, 0, 400)
x2 <- runif(n, 10, 23)
X <- cbind(x0, x1, x2)
beta <- c(18, 0.478, -1.3)
sigma2 <- rep(45, n)
rho <- 0.7
# A <- invIrW.f()
mu <- mu.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
Sigma <- Sigma.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
y <- t(rmvnorm.f(n = 1, mu = mu, Sigma = Sigma))
out <- sample(1:n, 1)
size <- 5
y[out] <- y[out] + size * sqrt(45)
plot(y)
library(sna)
library(BSPADATA)
library(dplyr)
library(ggmcmc)
set.seed(743435)
binmat.f <- function(n) {
B <- matrix(0, n, n)
B[1, 2] <- 1
B[n, n-1] <- 1
for (i in 2:(n-1)) {
B[i, i+1] <- 1
B[i, i-1] <- 1
}
return(B)
}
rmvnorm.f <- function(n, mu, Sigma) {
p <- length(mu)
Q <- chol(Sigma)
Z <- matrix(rnorm(n * p), n, p)
X <- Z %*% Q + rep(1, n) %*% t(mu)
X <- data.frame(X)
return(X)
}
dmvnorm.f <- function(x, mu, Sigma, log = TRUE) {
p <- length(x)
if (log == !TRUE) {
f <- exp(-0.5 * t(x - mu) %*% solve(Sigma) %*% (x - mu))
f <- f / ((2 * pi)^(0.5 * p) * det(Sigma)^0.5)
} else {
f <- -0.5 * (log(det(Sigma)) + p * log(2 * pi))
f <- f - 0.5 * (t(x - mu) %*% solve(Sigma) %*% (x - mu))
}
return(f)
}
mu.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
mu <- A %*% X %*% beta
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
X_k <- rho * D_k %*% W %*% s_k %*% t(s_k) %*% X
X_k <- X_k + D_k %*% X
mu <- A_k %*% X_k %*% beta
}
return(mu)
}
Sigma.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
V <- sigma2 * diag(n)
Sigma <- A %*% V %*% t(A)
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
V_k <- rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% s_k %*% t(s_k) %*% t(W) %*% t(D_k)
V_k <- V_k + D_k %*% t(D_k)
V_k <- sigma2 * V_k
Sigma <- A_k %*% V_k %*% t(A_k)
}
return(Sigma)
}
delmat.f <- function(k) {
D <- diag(n-1)
D <- as.data.frame(D)
D <- mutate(D, 0, .before = k)
D <- as.matrix(D)
return(D)
}
selvec.f <- function(k) {
s <- numeric(n)
s[k] <- 1
return(s)
}
n <- 50
B <- binmat.f(n = n)
W <- make.stochastic(dat = B, mode = "row")
x0 <- rep(1, n)
x1 <- runif(n, 0, 400)
x2 <- runif(n, 10, 23)
X <- cbind(x0, x1, x2)
beta <- c(18, 0.478, -1.3)
sigma2 <- rep(45, n)
rho <- 0.7
# A <- invIrW.f()
mu <- mu.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
Sigma <- Sigma.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
y <- t(rmvnorm.f(n = 1, mu = mu, Sigma = Sigma))
out <- sample(1:n, 1)
size <- 5
y[out] <- y[out] + size * sqrt(45)
library(sna)
library(BSPADATA)
library(dplyr)
library(ggmcmc)
set.seed(29486173)
binmat.f <- function(n) {
B <- matrix(0, n, n)
B[1, 2] <- 1
B[n, n-1] <- 1
for (i in 2:(n-1)) {
B[i, i+1] <- 1
B[i, i-1] <- 1
}
return(B)
}
rmvnorm.f <- function(n, mu, Sigma) {
p <- length(mu)
Q <- chol(Sigma)
Z <- matrix(rnorm(n * p), n, p)
X <- Z %*% Q + rep(1, n) %*% t(mu)
X <- data.frame(X)
return(X)
}
dmvnorm.f <- function(x, mu, Sigma, log = TRUE) {
p <- length(x)
if (log == !TRUE) {
f <- exp(-0.5 * t(x - mu) %*% solve(Sigma) %*% (x - mu))
f <- f / ((2 * pi)^(0.5 * p) * det(Sigma)^0.5)
} else {
f <- -0.5 * (log(det(Sigma)) + p * log(2 * pi))
f <- f - 0.5 * (t(x - mu) %*% solve(Sigma) %*% (x - mu))
}
return(f)
}
mu.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
mu <- A %*% X %*% beta
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
X_k <- rho * D_k %*% W %*% s_k %*% t(s_k) %*% X
X_k <- X_k + D_k %*% X
mu <- A_k %*% X_k %*% beta
}
return(mu)
}
Sigma.f <- function(beta, sigma2, rho, omit = TRUE) {
if (omit == !TRUE) {
A <- diag(n) - rho * W
A <- solve(A)
V <- sigma2 * diag(n)
Sigma <- A %*% V %*% t(A)
} else {
A_k <- diag(n-1)
A_k <- A_k - rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% W %*% t(D_k) - rho * D_k %*% W %*% t(D_k)
A_k <- solve(A_k)
V_k <- rho^2 * D_k %*% W %*% s_k %*% t(s_k) %*% s_k %*% t(s_k) %*% t(W) %*% t(D_k)
V_k <- V_k + D_k %*% t(D_k)
V_k <- sigma2 * V_k
Sigma <- A_k %*% V_k %*% t(A_k)
}
return(Sigma)
}
delmat.f <- function(k) {
D <- diag(n-1)
D <- as.data.frame(D)
D <- mutate(D, 0, .before = k)
D <- as.matrix(D)
return(D)
}
selvec.f <- function(k) {
s <- numeric(n)
s[k] <- 1
return(s)
}
n <- 50
B <- binmat.f(n = n)
W <- make.stochastic(dat = B, mode = "row")
x0 <- rep(1, n)
x1 <- runif(n, 0, 400)
x2 <- runif(n, 10, 23)
X <- cbind(x0, x1, x2)
beta <- c(18, 0.478, -1.3)
sigma2 <- rep(45, n)
rho <- 0.7
# A <- invIrW.f()
mu <- mu.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
Sigma <- Sigma.f(beta = beta, sigma2 = sigma2, rho = rho, omit = FALSE)
y <- t(rmvnorm.f(n = 1, mu = mu, Sigma = Sigma))
out <- sample(1:n, 1)
size <- 5
y[out] <- y[out] + size * sqrt(45)
plot(y)
View(W)
View(B)
source("~/Desktop/simulation/simulation.R", echo=TRUE)
source("~/Desktop/simulation/simulation.R", echo=TRUE)
biplot(PCA, cex=c(0.01, 1), xlab = "PC1 (79%)", ylab = "PC2 (13%)")
source("~/Desktop/simulation/simulation.R", echo=TRUE)
biplot(PCA, cex=c(0.01, 1), xlab = "PC1 (75%)", ylab = "PC2 (13%)")
source("~/Desktop/simulation/simulation.R", echo=TRUE)
biplot(PCA, cex=c(0.01, 1), xlab = "PC1 (66%)", ylab = "PC2 (12%)")
source("~/Desktop/simulation/simulation.R", echo=TRUE)
biplot(PCA, cex=c(0.01, 1), xlab = "PC1 (30%)", ylab = "PC2 (26%)")
