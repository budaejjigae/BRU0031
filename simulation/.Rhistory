source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
summary(PCA)
PCA_3D = scatterplot3d(x = PCA_R[, 1], y = PCA_R[, 2], z = PCA_R[, 3],        #  visual 03
xlab = "PC1 (.78)", ylab = "PC2 (.19)", zlab = "PC3 (.03)",
color = hex_50, pch = 19, type = "h")
PCA_2D = PCA_3D$xyz.convert(PCA_R[,1], PCA_R[,2], PCA_R[,3])
text(PCA_2D$x, PCA_2D$y,
labels = id_50, pos = 3)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
summary(PCA)
PCA_3D = scatterplot3d(x = PCA_R[, 1], y = PCA_R[, 2], z = PCA_R[, 3],        #  visual 03
xlab = "PC1 (.86)", ylab = "PC2 (.10)", zlab = "PC3 (.05)",
color = hex_50, pch = 19, type = "h")
PCA_2D = PCA_3D$xyz.convert(PCA_R[,1], PCA_R[,2], PCA_R[,3])
text(PCA_2D$x, PCA_2D$y,
labels = id_50, pos = 3)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
summary(PCA)
PCA_3D = scatterplot3d(x = PCA_R[, 1], y = PCA_R[, 2], z = PCA_R[, 3],        #  visual 03
xlab = "PC1 (.66)", ylab = "PC2 (.34)", zlab = "PC3 (.00)",
color = hex_50, pch = 19, type = "h")
PCA_2D = PCA_3D$xyz.convert(PCA_R[,1], PCA_R[,2], PCA_R[,3])
text(PCA_2D$x, PCA_2D$y,
labels = id_50, pos = 3)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
S <- matrix(c(1, 2, 2,
2, 1, 2,
2, 2, 1), 3, 3)
View(S)
s <- chol(S)
s <- sqrt(S)
View(s)
s %*% s
s %*% t(s)
View(S)
View(s)
library(pracma)
S <- matrix(c(1, 2, 2,
2, 1, 2,
2, 2, 1), 3, 3)
s <- rootm(A = S, p = 2)
library(pracma)
S <- matrix(c(1, 2, 2,
2, 1, 2,
2, 2, 1), 3, 3)
s <- sqrtm(S)
library(pracma)
S <- matrix(c(10, 7, 8, 7,
7, 5, 6, 5,
8, 6, 10, 9,
7, 5, 9, 10), 4, 4)
s <- sqrtm(S)
View(s)
View(s)
rootm(A = S, p = 2)
View(S)
View(s)
s[["B"]]
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
Mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
View(Sigma_0)
Mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_0 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_0 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
View(y_0)
mu_hat = mean(y_0)
Sigma_hat = cov(y_0)
View(Sigma_hat)
Sigma_hat = var(y_0)
Sigma_hat = var(y_0)
View(Sigma_hat)
var(y_0)
cov(y_0)
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
W = C / rowSums(C)      #      right stochastic spatial weight matrix
X = rmvnorm(n, zeros_m, eye_m)    #  matrix normal design matrix
e_0 = rmvnorm(n, numeric(1), sigma2_0 * diag(1))    #  multivariate normal vector of disturbances
A_0 = eye_n - rho_0 * W
y_0 = solve(A_0) %*% X %*% beta_0 + solve(A_0) %*% e_0
mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_1 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
y_bar = mean(y_0)
s2 = var(y_0)
y_2 = (y_0 - y_bar) / sqrt(s2)
View(y_0)
View(y_1)
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
W = C / rowSums(C)      #      right stochastic spatial weight matrix
X = rmvnorm(n, zeros_m, eye_m)    #  matrix normal design matrix
e_0 = rmvnorm(n, numeric(1), sigma2_0 * diag(1))    #  multivariate normal vector of disturbances
A_0 = eye_n - rho_0 * W
y_0 = solve(A_0) %*% X %*% beta_0 + solve(A_0) %*% e_0
mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_0 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
View(y_0)
View(e_0)
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
W = C / rowSums(C)      #      right stochastic spatial weight matrix
X = rmvnorm(n, zeros_m, eye_m)    #  matrix normal design matrix
e_0 = rmvnorm(n, numeric(1), sigma2_0 * diag(1))    #  multivariate normal vector of disturbances
A_0 = eye_n - rho_0 * W
y_0 = solve(A_0) %*% X %*% beta_0 + solve(A_0) %*% e_0
mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_0 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
function_0 = function(index, deviate) {
# additive outliers
y_0[index] = y_0[index] + deviate * sqrtm(Sigma_0)[index, index]
output = y_0
return(output)
}
index = 25
# deviate = 0
deviate = 1
y = function_0(first, last, deviate)    #   influential observations will distort parameter estimates
y = function_0(index, deviate)    #   influential observations will distort parameter estimates
plot(y, ylim = c(-5, 5))
y = function_0(25, 1)    #   influential observations will distort parameter estimates
plot(y, ylim = c(-5, 5))
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
W = C / rowSums(C)      #      right stochastic spatial weight matrix
X = rmvnorm(n, zeros_m, eye_m)    #  matrix normal design matrix
e_0 = rmvnorm(n, numeric(1), sigma2_0 * diag(1))    #  multivariate normal vector of disturbances
A_0 = eye_n - rho_0 * W
y_0 = solve(A_0) %*% X %*% beta_0 + solve(A_0) %*% e_0
mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_0 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
function_0 = function(index, deviate) {
# additive outliers
y_0[index] = y_0[index] + deviate * sqrtm(Sigma_0)[index, index]
output = y_0
return(output)
}
y = function_0(25, 1)    #   influential observations will distort parameter estimates
View(Sigma_0)
sqrtm(Sigma_0)
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
W = C / rowSums(C)      #      right stochastic spatial weight matrix
X = rmvnorm(n, zeros_m, eye_m)    #  matrix normal design matrix
e_0 = rmvnorm(n, numeric(1), sigma2_0 * diag(1))    #  multivariate normal vector of disturbances
A_0 = eye_n - rho_0 * W
y_0 = solve(A_0) %*% X %*% beta_0 + solve(A_0) %*% e_0
mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_0 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
function_0 = function(index, deviate) {
# additive outliers
y_0[index] = y_0[index] + deviate * sqrtm(Sigma_0)$B[index, index]
output = y_0
return(output)
}
y = function_0(25, 1)    #   influential observations will distort parameter estimates
plot(y, ylim = c(-5, 5))
y_df = as.data.frame(y)
ggplot(y_df, aes(1:50, V1)) +           #   visual 01
xlab("Index") +
ylab("Value") +
geom_point(color = hex_50, size = 5) +
theme_bw()
y_df = as.data.frame(y)
ggplot(y_df, aes(1:50, V1)) +           #   visual 01
xlab("Index") +
ylab("Value") +
geom_point(color = hex_50, size = 1) +
theme_bw()
y = function_0(25, 1)    #   influential observations will distort parameter estimates
plot(y, ylim = c(-5, 5))
y_df = as.data.frame(y)
ggplot(y_df, aes(1:50, V1)) +           #   visual 01
xlab("Index") +
ylab("Value") +
geom_point(color = hex_50, size = 5) +
theme_bw()
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
set.seed(743435)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
W = C / rowSums(C)      #      right stochastic spatial weight matrix
X = rmvnorm(n, zeros_m, eye_m)    #  matrix normal design matrix
e_0 = rmvnorm(n, numeric(1), sigma2_0 * diag(1))    #  multivariate normal vector of disturbances
A_0 = eye_n - rho_0 * W
y_0 = solve(A_0) %*% X %*% beta_0 + solve(A_0) %*% e_0
plot(y_0)
mu_0 = solve(A_0) %*% X %*% beta_0
Sigma_0 = sigma2_0 * solve(A_0) %*% t(solve(A_0))
y_0 = sqrtm(Sigma_0)$Binv %*% (y_0 - mu_0)
function_0 = function(index, deviate) {
# additive outliers
y_0[index] = y_0[index] + deviate * sigma2_0
output = y_0
return(output)
}
y = function_0(25, 1)    #   influential observations will distort parameter estimates
plot(y, ylim = c(-5, 5))
y_df = as.data.frame(y)
library(pracma)
library(mvtnorm)
library(ggplot2)
library(MCMCpack)
library(ggmcmc)
library(dplyr)
library(scatterplot3d)
set.seed(743435)
hex = c("#000000", "#FFFFFF", "#FF0000", "#00FF00",
"#0000FF", "#FFFF00", "#00FFFF", "#FF00FF",
"#C0C0C0", "#808080", "#800000", "#808000",
"#008000", "#800080", "#008080", "#000080")
hex_50 = c(rep(hex[4], 24), rep(hex[8], 1), rep(hex[4], 25))
id_50 = c(rep("", 19), paste0("", 20:30), rep("", 20))
rho_0 = 0.5
m = 1
zeros_m = numeric(m)      # 0
eye_m = diag(m)           # 1
beta_0 = rep(0.5, m)
sigma2_0 = 0.5
n = 50
zeros_n = numeric(n)      # 0
eye_n = diag(n)           # 1
C = Diag(rep(1, n - 1), 1) + Diag(rep(1, n - 1), -1)
W = C / rowSums(C)      #      right stochastic spatial weight matrix
X = rmvnorm(n, zeros_m, eye_m)    #  matrix normal design matrix
e_0 = rmvnorm(n, numeric(1), sigma2_0 * diag(1))    #  multivariate normal vector of disturbances
A_0 = eye_n - rho_0 * W
y_0 = solve(A_0) %*% X %*% beta_0 + solve(A_0) %*% e_0
y_bar = mean(y_0)
s2 = var(y_0)
for (i in 1:n) {
y_0[i] = (y_0[i] - y_bar) / sqrt(s2)
}
View(y_0)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
source("~/Downloads/BRU0031/simulation/simulation.R", echo=TRUE)
